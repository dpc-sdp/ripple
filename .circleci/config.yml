version: 2.1

parameters:
  e2e:
    type: boolean
    default: false
  e2e_be_url:
    type: string
    default: ''
  e2e_fe_url:
    type: string
    default: ''
  e2e_project:
    type: string
    default: ''

defaults: &defaults
  working_directory: ~/app

executors:
  default:
    docker:
      - image: circleci/node:14-browsers
  cypress:
    docker:
      - image: cypress/browsers:node14.7.0-chrome84
        environment:
          CIRCLE_TEST_REPORTS: test-results
          TZ: "Australia/Melbourne"
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD

orbs:
  sdp-test: dpc-sdp/sdp-test@1

jobs:
  build:
    <<: *defaults
    executor: default
    steps:
      - checkout
      - restore_cache:
          keys:
            - v9-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      - save_cache:
          key: v9-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache
      - run:
          name: build reference nuxt app
          command: yarn reference:build
      - persist_to_workspace:
          root: ~/app
          paths: .

  test:
    <<: *defaults
    executor: default
    steps:
      - attach_workspace:
          at: ~/app
      - restore_cache:
          keys:
            - v9-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: Lint code.
          command: yarn lint --format ./node_modules/eslint-junit/index.js
          environment:
             ESLINT_JUNIT_OUTPUT: ./test-results/lint/eslint.xml
      - run:
          name: Unit tests
          command: yarn test:unit --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: test-results/unit/
      - persist_to_workspace:
          root: ~/app
          paths: .
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
      - store_artifacts:
          path: examples/reference/test/integration/videos
      - store_artifacts:
          path: examples/reference/test/integration/screenshots



  reference-integration:
    # Integration tests confirm FE components are working correctly without testing BE
    <<: *defaults
    executor: cypress
    parallelism: 2
    steps:
      - attach_workspace:
          at: ~/app
      - restore_cache:
          keys:
            - v9-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: run full integration test
          command: yarn reference:integration
      - store_artifacts:
          path: test-results
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: examples/reference/test/integration/videos
      - store_artifacts:
          path: examples/reference/test/integration/screenshots


  integration-example:
    # This runs the full suite of integration tests on example nuxt tide app
    <<: *defaults
    executor: cypress
    steps:
      - attach_workspace:
          at: ~/app
      - restore_cache:
          keys:
            - v9-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: build example nuxt app
          command: cd examples/basic-examples && yarn build:default
      - run:
          name: run full integration test
          command: yarn test:integration-example
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
      - store_artifacts:
          path: examples/basic-examples/test/integration/videos
      - store_artifacts:
          path: examples/basic-examples/test/integration/screenshots

  integration-vue-example-app:
  # This runs the full suite of integration tests on example vue example app
    <<: *defaults
    executor: cypress
    steps:
      - attach_workspace:
          at: ~/app
      - restore_cache:
          keys:
            - v9-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: build example nuxt app
          command: cd examples/vue-example-app && yarn build
      - run:
          name: run smoke test
          command: cd examples/vue-example-app && yarn test:smoke
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
      - store_artifacts:
          path: examples/vue-example-app/test/integration/videos
      - store_artifacts:
          path: examples/vue-example-app/test/integration/screenshots

  storybook:
    <<: *defaults
    executor: default
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: run UI test
          command: cd src && yarn chromatic --project-token $CHROMATIC_APP_CODE --exit-zero-on-changes

  # Publish the packages to NPM. This should depend on the `build` job.
  create-release:
    <<: *defaults
    executor: default
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - run:
          name: Authenticate with registry
          command: |
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
            git update-index --assume-unchanged .npmrc
      - run:
          name: Publish packages to NPM
          command: npx lerna publish from-package --force-publish --yes

  # Publish the packages as a pre-release versions to NPM. This should depend on
  # the `build` job.
  create-prerelease:
    executor: default
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - run:
          name: Authenticate with registry
          command: |
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
            git update-index --assume-unchanged .npmrc
      - run:
          name: Publish pre-release packages to NPM
          command: npx lerna publish from-package --canary --yes

  # Create a git tag for this release and push to the remote repository.
  tag-release:
    executor: default
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - run:
          name: Git tag the release with the `lerna.json` version number
          command: |
            PACKAGE_VERSION=$(node -pe "require('./lerna.json')['version']")
            git tag v$PACKAGE_VERSION
      - run:
          name: Push git tag to the remote repository
          command: |
            PACKAGE_VERSION=$(node -pe "require('./lerna.json')['version']")
            git push -q https://$GITHUB_REPO_TOKEN@github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git v$PACKAGE_VERSION

  # Create release notes on GitHub using the `github-release-notes` package.
  create-release-notes:
    executor: default
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - run:
          name: Install github-release-notes package
          command: yarn add -D -W github-release-notes
      - run:
          name: Generate release notes and publish to GitHub
          command: |
            PACKAGE_VERSION=$(node -pe "require('./lerna.json')['version']")
            npx gren release --data-source=commits --tags=v$PACKAGE_VERSION --override --token $GITHUB_REPO_TOKEN

workflows:
  version: 2
  commit:
    when:
      and:
        - not: << pipeline.parameters.e2e >>
        - not:
            matches:
              pattern: "^master$"
              value: << pipeline.git.branch >>
    jobs:
      - build:
          context: Ripple
      - storybook:
          context: Ripple
          requires:
            - build
      - test:
          context: Ripple
          requires:
            - build
      # Run regression tests on release branches
      - reference-integration:
          requires:
            - build
          filters:
            branches:
              only:
                - /^release\/.*/
      # - integration-vue-example-app:
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         only:
      #           - /^release\/.*/

  # Builds modules, verifies code with the linter, runs unit tests, and
  # publishes the built packages to NPM.
  publish-to-npm:
    when:
      and:
        - not: << pipeline.parameters.e2e >>
        - equal: [ master, << pipeline.git.branch >> ]
    jobs:
      - build:
          filters:
            branches:
              only:
                - master

      - test:
          requires:
            - build

        # Manual approval step as a final gatekeeper to prevent
        # possible mistakes!
      - confirm-release:
          type: approval
          requires:
            - build
            - test

      - create-release:
          requires:
            - confirm-release

      - tag-release:
          requires:
            - confirm-release
            - create-release

      - create-release-notes:
          requires:
            - confirm-release
            - tag-release

  nightwatch:
    when: << pipeline.parameters.e2e >>
    jobs:
      - sdp-test/smoke:
          filters:
            branches:
              only:
                - /^release\/.*/
          context:
            - e2e-test
            - e2e-test-open
          be_url: << pipeline.parameters.e2e_be_url >>
          fe_url: << pipeline.parameters.e2e_fe_url >>
          project: << pipeline.parameters.e2e_project >>
          browser: 'chrome'
      - sdp-test/e2e:
          name: sdp-test/e2eChrome
          filters:
            branches:
              only:
                - /^release\/.*/
          requires:
            - sdp-test/smoke
          context:
            - e2e-test
            - e2e-test-open
          be_url: << pipeline.parameters.e2e_be_url >>
          fe_url: << pipeline.parameters.e2e_fe_url >>
          project: << pipeline.parameters.e2e_project >>
          browser: 'chrome'
      - sdp-test/e2e:
          name: sdp-test/e2eAndroid
          filters:
            branches:
              only:
                - /^release\/.*/
          requires:
            - sdp-test/e2eChrome
          context:
            - e2e-test
            - e2e-test-open
          be_url: << pipeline.parameters.e2e_be_url >>
          fe_url: << pipeline.parameters.e2e_fe_url >>
          project: << pipeline.parameters.e2e_project >>
          browser: 'androidChrome'
      - sdp-test/e2e:
          name: sdp-test/e2eIE11
          filters:
            branches:
              only:
                - /^release\/.*/
          requires:
            - sdp-test/e2eChrome
          context:
            - e2e-test
            - e2e-test-open
          be_url: << pipeline.parameters.e2e_be_url >>
          fe_url: << pipeline.parameters.e2e_fe_url >>
          project: << pipeline.parameters.e2e_project >>
          browser: 'ie11'
