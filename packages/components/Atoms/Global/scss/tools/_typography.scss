@mixin rpl_typography_font($font-size: 's', $line-height: 1.2em, $font-family: 'inherit', $include-base: true) {
  @if $font-family != 'inherit' {
    font-family: rpl-font($font-family);
  }
  @if type-of($font-size) == string {
    font-size: rpl-font-size($font-size);
  }
  @if type-of($font-size) == number {
    font-size: $font-size;
  }
  line-height: $line-height;
  @if $include-base == true {
    // The custom Vicfont has fixed font weight,
    // so we set this to always normal,
    // this will make all browsers render the font more consistently.
    // See: https://stormconsultancy.co.uk/blog/development/tips-tricks/dealing-with-firefox-rendering-fonts-too-bold-with-browser-specific-css/
    font-weight: normal;
  }
}

@mixin rpl_display_background($font-size, $include-base: true) {
  @if $include-base == true {
    background-color: $rpl-display-background-color;
    color: $rpl-display-text-color;
    display: inline;
    // sass-lint:disable no-vendor-prefixes
    @supports (box-decoration-break: clone) or (-webkit-box-decoration-break: clone) {
      -webkit-box-decoration-break: clone;
      box-decoration-break: clone;
    }
    // sass-lint:enable no-vendor-prefixes
  }
  // sass-lint:disable no-vendor-prefixes
  @supports (box-decoration-break: clone) or (-webkit-box-decoration-break: clone) {
    padding: 0 map-get($rpl-font-display-background-padding, $font-size);
  }
  // sass-lint:enable no-vendor-prefixes
  @if $font-size {
    line-height: map-get($rpl-font-display-background-line-height, $font-size);
  }
}

@mixin rpl_typography($name: 'body_default') {
  @if map-get($rpl-typography, $name) == null {
    @error '"#{$name}" is not an available typeset';
  }
  $typography-rules: map-get($rpl-typography, $name);
  @include rpl_typography_ruleset($typography-rules);
}

@mixin rpl_typography_ruleset($ruleset) {
  // Print rules
  @if type-of($ruleset) == list {
    @include rpl_typography_print_rules($ruleset);
  }
  // Print breakpoints
  @if type-of($ruleset) == map {
    $breakpoints: map-keys($ruleset);
    @each $breakpoint in $breakpoints {
      $index: index($breakpoints, $breakpoint);
      $breakpoint-rules: map-get($ruleset, $breakpoint);
      // Avoid unnecessary duplication; include base styles only on first breakpoint.
      $include-base: false;
      @if $index == 1 {
        $include-base: true;
      }
      @include rpl_breakpoint($breakpoint) {
        @include rpl_typography_print_rules($breakpoint-rules, $include-base);
      }
    }
  }
}

@mixin rpl_typography_print_rules($rules, $include-base: true) {
  $font-size: nth($rules, 1);
  $line-height: nth($rules, 2);
  $font-family: nth($rules, 3);
  $include-back: false;
  @if length($rules) > 3 {
    $include-back: nth($rules, 4);
  }
  @if $include-back == true {
    $line-height: 0;
  }
  @include rpl_typography_font($font-size, $line-height, $font-family, $include-base);
  @if $include-back == true {
    span {
      @include rpl_display_background($font-size, $include-base);
    }
  }
}
