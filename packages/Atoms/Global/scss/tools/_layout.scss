@mixin rpl_component_gutter {
  @each $bp, $gutter in $rpl-row-gutter {
    @include rpl_breakpoint($bp) {
      margin-bottom: $gutter;
    }
  }
}

// This site constrain is using !important as it should be on top level to keep the site layout consistency
@mixin rpl_site_constrain($style: all) {
  // sass-lint:disable-block no-important
  @if $style == all {
    padding-left: $rpl-component-padding-xs !important;
    padding-right: $rpl-component-padding-xs !important;

    @each $bp, $padding in map-get($rpl-layout, 'site_padding') {
      @include rpl_breakpoint($bp) {
        padding-left: $padding !important;
        padding-right: $padding !important;
      }
    }

    // max width will override site padding
    @each $bp, $width in map-get($rpl-layout, 'site_max_width') {
      @include rpl_breakpoint($bp) {
        padding-left: calc((100% - #{$width}) / 2) !important;
        padding-right: calc((100% - #{$width}) / 2) !important;
      }
    }

  } @else if $style == small {
    @each $bp, $padding in map-get($rpl-layout, 'site_padding') {
      @if index((xs, s, m), $bp) {
        @include rpl_breakpoint($bp) {
          padding-left: $padding !important;
          padding-right: $padding !important;
        }
      }

      @include rpl_breakpoint(l) {
        padding-left: 0 !important;
        padding-right: 0 !important;
      }
    }
  }
}

// Make a item inside site constrain container to grow to viewport edge.
// Argument `all` will make a item grow to edge all the time.
//
// By default, a item will always grow to edge under breakpoint `l`.
// So in that case, if you want it grow to edge only in small screen, you don't need to use this mixin.
// But if a element is nested inside a site constrain container, it won't grow to edge under breakpoint `l`,
// so you can use this mixin with `small` argument to make it.
//
// Argument `card element` is used for making a card element grow to edge in small screen, e.g a card image.
@mixin rpl_edge($style: all) {
  @if $style == all {
    margin-left: -$rpl-component-padding-xs;
    margin-right: -$rpl-component-padding-xs;

    // sass-lint:disable-block no-important
    @each $bp, $padding in map-get($rpl-layout, 'site_padding') {
      @include rpl_breakpoint($bp) {
        margin-left: -$padding;
        margin-right: -$padding;
      }
    }

    // max width will override site padding
    @each $bp, $width in map-get($rpl-layout, 'site_max_width') {
      @include rpl_breakpoint($bp) {
        margin-left: calc((100vw - #{$width}) / -2);
        margin-right: calc((100vw - #{$width}) / -2);
      }
    }

  } @else if $style == small {
    @each $bp, $padding in map-get($rpl-layout, 'site_padding') {
      @if index((xs, s, m), $bp) {
        @include rpl_breakpoint($bp) {
          margin-left: -$padding;
          margin-right: -$padding;
        }
      }
    }

    @include rpl_breakpoint(l) {
      margin-left: 0;
      margin-right: 0;
    }

  } @else if $style == 'card element' {
    margin-left: -$rpl-component-padding-xs;
    margin-right: -$rpl-component-padding-xs;
    width: calc(100% + (#{$rpl-component-padding-xs} * 2));

    @include rpl_breakpoint(s) {
      margin-left: -$rpl-component-padding-s;
      margin-right: -$rpl-component-padding-s;
      width: calc(100% + (#{$rpl-component-padding-s} * 2));
    }

    @include rpl_breakpoint(m) {
      margin-left: 0;
      margin-right: 0;
      width: auto;
    }
  }
}

@mixin rpl_mobile_padding {
  padding-left: $rpl-component-padding-xs;
  padding-right: $rpl-component-padding-xs;

  @include rpl_breakpoint(s) {
    padding-left: $rpl-component-padding-s;
    padding-right: $rpl-component-padding-s;
  }
}
